package com.imesong.springdream.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "dream".
 */
public class DreamDao extends AbstractDao<Dream, Long> {

    public static final String TABLENAME = "dream";

    public DreamDao(DaoConfig config) {
        super(config);
    }

    ;


    public DreamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"dream\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"category1\" INTEGER," + // 1: category1
                "\"category2\" INTEGER," + // 2: category2
                "\"NAME\" TEXT NOT NULL ," + // 3: name
                "\"CONTENT\" TEXT NOT NULL ," + // 4: content
                "\"DEL\" INTEGER," + // 5: del
                "\"RECOMMEND\" INTEGER," + // 6: recommend
                "\"SEQUENCE\" INTEGER," + // 7: sequence
                "\"HIT\" INTEGER," + // 8: hit
                "\"IS_LONG\" INTEGER);"); // 9: is_long
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"dream\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Dream entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        Integer category1 = entity.getCategory1();
        if (category1 != null) {
            stmt.bindLong(2, category1);
        }

        Integer category2 = entity.getCategory2();
        if (category2 != null) {
            stmt.bindLong(3, category2);
        }
        stmt.bindString(4, entity.getName());
        stmt.bindString(5, entity.getContent());

        Boolean del = entity.getDel();
        if (del != null) {
            stmt.bindLong(6, del ? 1L: 0L);
        }

        Boolean recommend = entity.getRecommend();
        if (recommend != null) {
            stmt.bindLong(7, recommend ? 1L: 0L);
        }

        Integer sequence = entity.getSequence();
        if (sequence != null) {
            stmt.bindLong(8, sequence);
        }

        Integer hit = entity.getHit();
        if (hit != null) {
            stmt.bindLong(9, hit);
        }

        Integer is_long = entity.getIs_long();
        if (is_long != null) {
            stmt.bindLong(10, is_long);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Dream readEntity(Cursor cursor, int offset) {
        Dream entity = new Dream( //
                cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // category1
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // category2
                cursor.getString(offset + 3), // name
                cursor.getString(offset + 4), // content
                cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // del
                cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // recommend
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // sequence
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // hit
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // is_long
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Dream entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCategory1(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCategory2(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.getString(offset + 3));
        entity.setContent(cursor.getString(offset + 4));
        entity.setDel(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setRecommend(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setSequence(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setHit(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIs_long(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Dream entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Dream entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Dream.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "id");
        public final static Property Category1 = new Property(1, Integer.class, "category1", false, "category1");
        public final static Property Category2 = new Property(2, Integer.class, "category2", false, "category2");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Del = new Property(5, Boolean.class, "del", false, "DEL");
        public final static Property Recommend = new Property(6, Boolean.class, "recommend", false, "RECOMMEND");
        public final static Property Sequence = new Property(7, Integer.class, "sequence", false, "SEQUENCE");
        public final static Property Hit = new Property(8, Integer.class, "hit", false, "HIT");
        public final static Property Is_long = new Property(9, Integer.class, "is_long", false, "IS_LONG");
    }
    
}
