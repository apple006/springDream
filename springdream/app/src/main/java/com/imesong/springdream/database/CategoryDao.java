package com.imesong.springdream.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "category".
 */
public class CategoryDao extends AbstractDao<Category, Long> {

    public static final String TABLENAME = "category";

    public CategoryDao(DaoConfig config) {
        super(config);
    }

    ;


    public CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"category\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"name\" TEXT NOT NULL ," + // 1: name
                "\"parent\" INTEGER," + // 2: parent
                "\"pinxin\" TEXT," + // 3: pinxin
                "\"sequence\" INTEGER," + // 4: sequence
                "\"del\" INTEGER);"); // 5: del
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"category\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Category entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getName());

        Integer parent = entity.getParent();
        if (parent != null) {
            stmt.bindLong(3, parent);
        }

        String pinxin = entity.getPinxin();
        if (pinxin != null) {
            stmt.bindString(4, pinxin);
        }

        Integer sequence = entity.getSequence();
        if (sequence != null) {
            stmt.bindLong(5, sequence);
        }

        Boolean del = entity.getDel();
        if (del != null) {
            stmt.bindLong(6, del ? 1L : 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Category readEntity(Cursor cursor, int offset) {
        Category entity = new Category( //
                cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // parent
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pinxin
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sequence
                cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // del
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Category entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setParent(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPinxin(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSequence(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDel(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Category entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Category entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Parent = new Property(2, Integer.class, "parent", false, "parent");
        public final static Property Pinxin = new Property(3, String.class, "pinxin", false, "pinxin");
        public final static Property Sequence = new Property(4, Integer.class, "sequence", false, "sequence");
        public final static Property Del = new Property(5, Boolean.class, "del", false, "del");
    }
    
}
